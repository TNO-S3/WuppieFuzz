name: Rust CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

permissions: {}

jobs:
  build-and-test:
    name: Build, Test, and Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, nightly]
    permissions:
      contents: read
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      # Install Rust toolchain
      - name: Install Rust ${{ matrix.rust }}
        uses: moonrepo/setup-rust@ede6de059f8046a5e236c94046823e2af11ca670 # v1.2.2
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      # Cache dependencies to speed up builds
      - name: Cache Cargo registry and build artifacts
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Run `cargo fmt` to check formatting
      - name: Check formatting with rustfmt
        run: cargo fmt --all -- --check

      # Run `cargo clippy` for linting
      - name: Run Clippy for linting
        run: cargo clippy --all-targets --all-features -- -D warnings

      # Build the entire workspace
      - name: Build the workspace
        run: cargo build --workspace --verbose

      # Run tests for all crates in the workspace
      - name: Run tests for all crates in the workspace
        run: cargo test --workspace --verbose

      # Run the thorough documentation check and summarize results
      - name: Run thorough documentation check and summarize results
        run: |
          # Run Clippy and capture the exit code
          cargo clippy --workspace --all-features -- -D missing_docs -W clippy::missing_docs_in_private_items
          CLIPPY_EXIT_CODE=$?

          # Summarize the results
          echo "Thorough documentation check completed."
          echo "This job is allowed to fail without breaking the workflow."
          echo "Please review the output above for any missing documentation warnings or errors."
          echo "Gradually address these issues to improve your project's documentation coverage."

          # Exit with the captured Clippy exit code
          exit $CLIPPY_EXIT_CODE

      # Check for uncommitted changes
      - name: Check for uncommitted changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Uncommitted changes found after build!"
            git status
            exit 1
          else
            echo "No uncommitted changes found."
          fi

  coverage:
    name: Code Coverage (Tarpaulin)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      # Install Rust nightly toolchain with required components for Tarpaulin or llvm-tools-preview
      - name: Install nightly toolchain with llvm-tools-preview
        uses: moonrepo/setup-rust@ede6de059f8046a5e236c94046823e2af11ca670 # v1.2.2
        with:
          profile: minimal
          toolchain: nightly
          components: llvm-tools-preview

      # Install Tarpaulin for coverage generation (requires nightly)
      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      # Generate code coverage reports for all crates in the workspace using Tarpaulin
      - name: Generate code coverage report with Tarpaulin
        run: |
          cargo tarpaulin --workspace --out Html --output-dir ./coverage-report \
            --ignore-tests --all-features

      # Upload the generated coverage report as an artifact to GitHub Actions for inspection or download.
      - name: Upload code coverage report as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: code-coverage-report-html
          path: ./coverage-report/

